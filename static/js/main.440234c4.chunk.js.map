{"version":3,"sources":["component/SearchBox/SearchBox.module.scss","component/Lyrics/Lyrics.module.scss","component/Button/Button.module.scss","component/SearchBox/index.js","component/SearchBox/SearchBox.jsx","component/Button/index.js","component/Button/Button.jsx","component/Lyrics/index.js","component/Lyrics/Lyrics.jsx","component/Logic/index.js","component/Logic/Logic.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","state","className","styles","search","artist","type","placeholder","onChange","this","props","searchArtist","song","searchSong","Component","Button","button","onClick","buttonLogic","text","Lyrics","finishedText","rawLyrics","paraArray","split","map","item","i","console","log","lyricSection","lyrics","addLyrics","Logic","lyricText","artistName","songTitle","setArtistName","event","setState","target","value","setSongTitle","getLyrics","fetch","then","response","json","jsonObj","catch","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,OAAS,0BAA0B,OAAS,4B,gBCA9DD,EAAOC,QAAU,CAAC,aAAe,6BAA6B,OAAS,yB,kBCAvED,EAAOC,QAAU,CAAC,OAAS,yB,qMCAZC,E,4MCGbC,MAAQ,G,uDAEN,OACE,6BAASC,UAAWC,IAAOC,QACzB,yBAAKF,UAAWC,IAAOE,QACrB,uCACA,2BAAOC,KAAK,OAAOC,YAAY,wBAAwBC,SAAUC,KAAKC,MAAMC,gBAE9E,yBAAKT,UAAWC,IAAOS,MACrB,2CACA,2BAAON,KAAK,OAAOC,YAAY,uBAAuBC,SAAUC,KAAKC,MAAMG,mB,GAX9CC,a,gBCFxBC,E,4MCGbd,MAAQ,G,uDAEN,OACA,yBAAKC,UAAWC,IAAOa,QACvB,4BAAQC,QAASR,KAAKC,MAAMQ,aAAcT,KAAKC,MAAMS,W,GALrBL,a,gBCFrBM,E,4MCGbnB,MAAQ,G,EAERoB,aAAe,SAACC,GACd,IAAMC,EAAYD,EAAUE,MAAM,MAAMC,KAAI,SAACC,EAAMC,GACjD,MAAa,KAATD,EACK,6BAEA,2BAAIA,MAIf,OADAE,QAAQC,IAAKN,GACNA,G,uDAIP,OACA,6BAASrB,UAAWC,IAAO2B,cACzB,yBAAK5B,UAAWC,IAAO4B,QACpBtB,KAAKY,aAAaZ,KAAKC,MAAMsB,iB,GAnBFlB,aCFrBmB,E,4MCKbhC,MAAQ,CACNiC,UAAW,GACXC,WAAY,GACZC,UAAW,I,EAGbC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACJ,WAAYG,EAAME,OAAOC,QACxCb,QAAQC,IAAI,EAAK5B,MAAMkC,a,EAIzBO,aAAe,SAACJ,GACd,EAAKC,SAAS,CAACH,UAAWE,EAAME,OAAOC,S,EAIzCE,UAAY,WACVC,MAAM,6BAAD,OAA8B,EAAK3C,MAAMkC,WAAzC,YAAuD,EAAKlC,MAAMmC,YACtES,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,GAAKA,EAAQjB,OAER,CACL,IAAMA,EAASiB,EAAQjB,OACvB,EAAKQ,SAAS,CAAEL,UAAWH,IAC3BH,QAAQC,IAAIE,QAJV,EAAKQ,SAAS,CAACL,UAAU,+CAO5Be,OAAM,SAAAC,GACLtB,QAAQC,IAAIqB,O,uDAOd,OACA,oCACE,kBAAC,EAAD,CACEvC,aAAcF,KAAK4B,cACnBxB,WAAYJ,KAAKiC,eAEnB,kBAAC,EAAD,CAAQxB,YAAaT,KAAKkC,UAAWxB,KAAK,WAC1C,kBAAC,EAAD,CAAQa,UAAWvB,KAAKR,MAAMiC,iB,GA/CDpB,aCAdqC,G,kNACnBlD,MAAQ,G,uDAEN,OACE,oCACA,4DACA,kBAAC,EAAD,W,GAN2Ba,cCObsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMiB,c","file":"static/js/main.440234c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"SearchBox_search__2ShJp\",\"artist\":\"SearchBox_artist__g4Sc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lyricSection\":\"Lyrics_lyricSection__37Fuj\",\"lyrics\":\"Lyrics_lyrics__1BZKv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1Gt6e\"};","import SearchBox from \"./SearchBox\";\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport styles from \"./SearchBox.module.scss\"\r\n\r\nexport default class SearchBox extends Component {\r\n  state = {  }\r\n  render() { \r\n    return (\r\n      <section className={styles.search}>\r\n        <div className={styles.artist}>\r\n          <h3>Artist:</h3>\r\n          <input type=\"text\" placeholder=\"type artist name here\" onChange={this.props.searchArtist}></input> \r\n        </div>\r\n        <div className={styles.song}>\r\n          <h3>Song Title:</h3>\r\n          <input type=\"text\" placeholder=\"type song title here\" onChange={this.props.searchSong}></input>  \r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import Button from \"./Button\";\r\nexport default Button;","import React, { Component } from 'react';\r\nimport styles from \"./Button.module.scss\";\r\n\r\nexport default class Button extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n    <div className={styles.button}>\r\n    <button onClick={this.props.buttonLogic}>{this.props.text}</button>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n","import Lyrics from './Lyrics';\r\nexport default Lyrics;","import React, { Component } from 'react';\r\nimport styles from \"./Lyrics.module.scss\";\r\n\r\nexport default class Lyrics extends Component {\r\n  state = {  }\r\n\r\n  finishedText = (rawLyrics) => {\r\n    const paraArray = rawLyrics.split('\\n').map((item, i) => {\r\n      if (item === \"\") {\r\n        return <br />;\r\n    } else { \r\n        return <p>{item}</p>;\r\n    }})\r\n    \r\n    console.log (paraArray);\r\n    return paraArray\r\n  }\r\n\r\n  render() { \r\n    return (  \r\n    <section className={styles.lyricSection}>\r\n      <div className={styles.lyrics}>\r\n        {this.finishedText(this.props.addLyrics)}\r\n      </div>\r\n    </section>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n//renders text with no formatting\r\n// render() { \r\n//   return (  <p>{this.props.addLyrics}</p>);\r\n// }\r\n\r\n\r\n\r\n//problem:\r\n//raw text renders with no paragraphing or line breaks\r\n//tried to apply function to fix this, but it is not rendering on the page","import Logic from \"./Logic\";\r\nexport default Logic;","import React, { Component } from 'react';\r\nimport SearchBox from \"../SearchBox\";\r\nimport Button from \"../Button\";\r\nimport Lyrics from \"../Lyrics\";\r\n\r\nexport default class Logic extends Component {\r\n  state = { \r\n    lyricText: \"\",\r\n    artistName: \"\",\r\n    songTitle: \"\"\r\n  }\r\n\r\n  setArtistName = (event) => {\r\n    this.setState({artistName: event.target.value})\r\n    console.log(this.state.artistName);\r\n  }\r\n  \r\n\r\n  setSongTitle = (event) => {\r\n    this.setState({songTitle: event.target.value})\r\n  }\r\n\r\n\r\n  getLyrics = () => {\r\n    fetch(`https://api.lyrics.ovh/v1/${this.state.artistName}/${this.state.songTitle}`)\r\n    .then(response => {\r\n      return response.json();\r\n    })\r\n    .then(jsonObj => {\r\n      if (!jsonObj.lyrics) {\r\n        this.setState({lyricText: `Sorry, these lyrics have not been found`})\r\n    } else {\r\n      const lyrics = jsonObj.lyrics; //'lyrics' ref refers to what I have in postman\r\n      this.setState({ lyricText: lyrics }) //as above\r\n      console.log(lyrics)\r\n    }})\r\n  \r\n    .catch(error => {\r\n      console.log(error);\r\n    })\r\n  \r\n  }\r\n\r\n\r\n  render() { \r\n    return (  \r\n    <>\r\n      <SearchBox\r\n        searchArtist={this.setArtistName}\r\n        searchSong={this.setSongTitle}\r\n      />\r\n      <Button buttonLogic={this.getLyrics} text=\"Submit\"/>\r\n      <Lyrics addLyrics={this.state.lyricText}/>\r\n    </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//questions\r\n//how to pass in the name of the artist and song?\r\n//how should the components be organised in the tree?","import React, { Component } from 'react';\r\nimport Logic from './component/Logic'\r\nimport styles from './App.module.scss';\r\n\r\n\r\nexport default class App extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <>\r\n      <h1>Search for song lyrics below</h1>\r\n      <Logic/>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//vanilla JS code for the API\r\n\r\n// const handleClick = () => {\r\n\r\n//   fetch(\"https://api.lyrics.ovh/v1/Coldplay/Adventure of a Lifetime\")\r\n//     .then(response => {\r\n//       return response.json();\r\n//     })\r\n//     .then(jsonObj => {\r\n//       const lyrics = jsonObj.lyrics;\r\n//       const outputSection = document.querySelector('section').innerHTML += `<p>${lyrics}</p>`;\r\n\r\n//       console.log(lyrics);\r\n\r\n//     })\r\n//     .catch(error => {\r\n//       console.log(error);\r\n//     })\r\n\r\n// }\r\n\r\n// document.querySelector('button').onclick = handleClick;\r\n\r\n// //api url: https://lyricsovh.docs.apiary.io/#","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}